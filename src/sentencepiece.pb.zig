// Code generated by protoc-gen-zig
///! package sentencepiece
const std = @import("std");
const Allocator = std.mem.Allocator;
const ArrayList = std.ArrayList;

const protobuf = @import("protobuf");
const ManagedString = protobuf.ManagedString;
const fd = protobuf.fd;

pub const TrainerSpec = struct {
    input: ArrayList(ManagedString),
    input_format: ?ManagedString = null,
    model_prefix: ?ManagedString = null,
    model_type: ?ModelType = .UNIGRAM,
    vocab_size: ?i32 = 8000,
    accept_language: ArrayList(ManagedString),
    self_test_sample_size: ?i32 = 0,
    enable_differential_privacy: ?bool = false,
    differential_privacy_noise_level: ?f32 = 0,
    differential_privacy_clipping_threshold: ?u64 = 0,
    character_coverage: ?f32 = 0.9995,
    input_sentence_size: ?u64 = 0,
    shuffle_input_sentence: ?bool = true,
    mining_sentence_size: ?i32 = null,
    training_sentence_size: ?i32 = null,
    seed_sentencepiece_size: ?i32 = 1000000,
    shrinking_factor: ?f32 = 0.75,
    max_sentence_length: ?i32 = 4192,
    num_threads: ?i32 = 16,
    num_sub_iterations: ?i32 = 2,
    max_sentencepiece_length: ?i32 = 16,
    split_by_unicode_script: ?bool = true,
    split_by_number: ?bool = true,
    split_by_whitespace: ?bool = true,
    treat_whitespace_as_suffix: ?bool = false,
    allow_whitespace_only_pieces: ?bool = false,
    split_digits: ?bool = false,
    pretokenization_delimiter: ?ManagedString = .Empty,
    control_symbols: ArrayList(ManagedString),
    user_defined_symbols: ArrayList(ManagedString),
    required_chars: ?ManagedString = null,
    byte_fallback: ?bool = false,
    vocabulary_output_piece_score: ?bool = true,
    hard_vocab_limit: ?bool = true,
    use_all_vocab: ?bool = false,
    unk_id: ?i32 = 0,
    bos_id: ?i32 = 1,
    eos_id: ?i32 = 2,
    pad_id: ?i32 = -1,
    unk_piece: ?ManagedString = ManagedString.static("<unk>"),
    bos_piece: ?ManagedString = ManagedString.static("<s>"),
    eos_piece: ?ManagedString = ManagedString.static("</s>"),
    pad_piece: ?ManagedString = ManagedString.static("<pad>"),
    unk_surface: ?ManagedString = ManagedString.static(" \xE2\x81\x87 "),
    train_extremely_large_corpus: ?bool = false,
    seed_sentencepieces_file: ?ManagedString = .Empty,

    pub const _desc_table = .{
        .input = fd(1, .{ .List = .String }),
        .input_format = fd(7, .String),
        .model_prefix = fd(2, .String),
        .model_type = fd(3, .{ .Varint = .Simple }),
        .vocab_size = fd(4, .{ .Varint = .Simple }),
        .accept_language = fd(5, .{ .List = .String }),
        .self_test_sample_size = fd(6, .{ .Varint = .Simple }),
        .enable_differential_privacy = fd(50, .{ .Varint = .Simple }),
        .differential_privacy_noise_level = fd(51, .{ .FixedInt = .I32 }),
        .differential_privacy_clipping_threshold = fd(52, .{ .Varint = .Simple }),
        .character_coverage = fd(10, .{ .FixedInt = .I32 }),
        .input_sentence_size = fd(11, .{ .Varint = .Simple }),
        .shuffle_input_sentence = fd(19, .{ .Varint = .Simple }),
        .mining_sentence_size = fd(12, .{ .Varint = .Simple }),
        .training_sentence_size = fd(13, .{ .Varint = .Simple }),
        .seed_sentencepiece_size = fd(14, .{ .Varint = .Simple }),
        .shrinking_factor = fd(15, .{ .FixedInt = .I32 }),
        .max_sentence_length = fd(18, .{ .Varint = .Simple }),
        .num_threads = fd(16, .{ .Varint = .Simple }),
        .num_sub_iterations = fd(17, .{ .Varint = .Simple }),
        .max_sentencepiece_length = fd(20, .{ .Varint = .Simple }),
        .split_by_unicode_script = fd(21, .{ .Varint = .Simple }),
        .split_by_number = fd(23, .{ .Varint = .Simple }),
        .split_by_whitespace = fd(22, .{ .Varint = .Simple }),
        .treat_whitespace_as_suffix = fd(24, .{ .Varint = .Simple }),
        .allow_whitespace_only_pieces = fd(26, .{ .Varint = .Simple }),
        .split_digits = fd(25, .{ .Varint = .Simple }),
        .pretokenization_delimiter = fd(53, .String),
        .control_symbols = fd(30, .{ .List = .String }),
        .user_defined_symbols = fd(31, .{ .List = .String }),
        .required_chars = fd(36, .String),
        .byte_fallback = fd(35, .{ .Varint = .Simple }),
        .vocabulary_output_piece_score = fd(32, .{ .Varint = .Simple }),
        .hard_vocab_limit = fd(33, .{ .Varint = .Simple }),
        .use_all_vocab = fd(34, .{ .Varint = .Simple }),
        .unk_id = fd(40, .{ .Varint = .Simple }),
        .bos_id = fd(41, .{ .Varint = .Simple }),
        .eos_id = fd(42, .{ .Varint = .Simple }),
        .pad_id = fd(43, .{ .Varint = .Simple }),
        .unk_piece = fd(45, .String),
        .bos_piece = fd(46, .String),
        .eos_piece = fd(47, .String),
        .pad_piece = fd(48, .String),
        .unk_surface = fd(44, .String),
        .train_extremely_large_corpus = fd(49, .{ .Varint = .Simple }),
        .seed_sentencepieces_file = fd(54, .String),
    };

    pub const ModelType = enum(i32) {
        UNIGRAM = 1,
        BPE = 2,
        WORD = 3,
        CHAR = 4,
        _,
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const NormalizerSpec = struct {
    name: ?ManagedString = null,
    precompiled_charsmap: ?ManagedString = null,
    add_dummy_prefix: ?bool = true,
    remove_extra_whitespaces: ?bool = true,
    escape_whitespaces: ?bool = true,
    normalization_rule_tsv: ?ManagedString = null,

    pub const _desc_table = .{
        .name = fd(1, .String),
        .precompiled_charsmap = fd(2, .Bytes),
        .add_dummy_prefix = fd(3, .{ .Varint = .Simple }),
        .remove_extra_whitespaces = fd(4, .{ .Varint = .Simple }),
        .escape_whitespaces = fd(5, .{ .Varint = .Simple }),
        .normalization_rule_tsv = fd(6, .String),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const SelfTestData = struct {
    samples: ArrayList(Sample),

    pub const _desc_table = .{
        .samples = fd(1, .{ .List = .{ .SubMessage = {} } }),
    };

    pub const Sample = struct {
        input: ?ManagedString = null,
        expected: ?ManagedString = null,

        pub const _desc_table = .{
            .input = fd(1, .String),
            .expected = fd(2, .String),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ModelProto = struct {
    pieces: ArrayList(SentencePiece),
    trainer_spec: ?TrainerSpec = null,
    normalizer_spec: ?NormalizerSpec = null,
    self_test_data: ?SelfTestData = null,
    denormalizer_spec: ?NormalizerSpec = null,

    pub const _desc_table = .{
        .pieces = fd(1, .{ .List = .{ .SubMessage = {} } }),
        .trainer_spec = fd(2, .{ .SubMessage = {} }),
        .normalizer_spec = fd(3, .{ .SubMessage = {} }),
        .self_test_data = fd(4, .{ .SubMessage = {} }),
        .denormalizer_spec = fd(5, .{ .SubMessage = {} }),
    };

    pub const SentencePiece = struct {
        piece: ?ManagedString = null,
        score: ?f32 = null,
        type: ?Type = .NORMAL,

        pub const _desc_table = .{
            .piece = fd(1, .String),
            .score = fd(2, .{ .FixedInt = .I32 }),
            .type = fd(3, .{ .Varint = .Simple }),
        };

        pub const Type = enum(i32) {
            NORMAL = 1,
            UNKNOWN = 2,
            CONTROL = 3,
            USER_DEFINED = 4,
            BYTE = 6,
            UNUSED = 5,
            _,
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};
